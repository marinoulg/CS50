sort1 uses: Bubble sort

How do you know?:
We said in class about bubble sort that if we were to get lucky and we were given an array that's already sorted, bubble sort could sort n items and using just n steps by making one pass through the array, concluding that no swaps are necessary, and then not continuing on with anything else, because the array is already sorted. However, because it has a big O of n squared, if the array if not sorted (randomized or reversed) it would take it about twice that much time.
If we now compare the time it took this algorithm to sort 5,000 numbers (in real time):
- if sorted,  0m0,011s (which is also the best time when comparing all 3 algorithms);
- if randomized, 0m0,055s;
- if reversed, 0m0,061s.
We observe the same pattern for 10,000 numbers (sorted: 0m0,030s, randomized: 0m0,188s, reversed: 0m0,213s) and 50,000 (sorted: 0m0,473s, incidentally also the fastest algorithm for this dataset, randomized: 0m6,796s, reversed: 0m5,320s).
In that case, we can also add that it makes sense this algorithm would be slightly faster when dealing with randomized data instead of reversed data, because as  deals with consecutive pairs of 2, it would take it a bit longer to reverse the data 2 by 2 completely, than a few steps that are necessarily done in advance if the data if randomized.

sort2 uses: Merge sort

How do you know?:
We concur it’s a merge sort algorithm as it was faster than the other 2 algorithms in all tasks except when it came to sorting sorted datasets of 5,000 and 50,000 numbers (it took slightly longer — from 0m0,011s for the bubble sort algorithm to 0m0,013s for the merge sort, and from 0m0,473s the bubble sort algorithm to 0m0,559s for the merge sort).
Apart from that observation and depending on the task at hand, or the different input on which to apply a sorting task, this algorithm is either way faster or at least very competitive compared to the two others.
As explained in the course, the merge sort algorithm is better than n squared (the big omega of the selection sort), though not nearly as good as big omega of n (the big omega of bubble sort), which is what we just highlighted with numbers above.

sort3 uses: Selection sort

How do you know?:
We believe it's a selection sort algorithm, because as it has a big omega and a big O both of n squared, no matter whether it is sorted or not, the sorting algorithm should still be more or less equal (considering the number of numbers to sort). We observe it is the case here, as it takes for 5,000 numbers (in real time):
- if sorted, 0m0,038s;
- if randomized, 0m0,037s;
- if reversed, 0m0,039s.
We observe the same pattern for 10,000 numbers (sorted: 0m0,124s, randomized: 0m0,133s, reversed: 0m0,130s) and 50,000 (sorted: 0m2,734s, randomized: 0m3,152s, reversed: 0m2,958s).
